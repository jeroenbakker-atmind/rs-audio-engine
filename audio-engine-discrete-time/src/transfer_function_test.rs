use crate::transfer_function::TransferFunction;

#[test]
fn test_z() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    assert_eq!(1.0 / fs, z.timestep);
    assert_eq!(0.0, z.numerator[0]);
    assert_eq!(1.0, z.numerator[1]);
    assert_eq!(1.0, z.denominator[0]);
    assert_eq!("f(z) = z", z.to_string());
}

#[test]
fn test_dl1() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let m = 38;
    let i0 = 5;
    let dl1 = z.pow(-(m - i0));
    assert_eq!("f(z) = \\frac{1}{z^{33}}", dl1.to_string());
}

#[test]
fn test_dl2() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let i0 = 5;
    let dl2 = z.pow(-i0);
    assert_eq!("f(z) = \\frac{1}{z^5}", dl2.to_string());
}

#[test]
/// Hl=gl*(1+al)/(1+al*z^-1);
fn test_hl() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let gl = -0.99;
    let al = -0.001;
    let result_a = z.pow(-1);
    assert_eq!("f(z) = \\frac{1}{z}", result_a.to_string());
    let result_b = al * result_a;
    assert_eq!("f(z) = \\frac{-0.001}{z}", result_b.to_string());
    let result_c = 1.0 + result_b;
    assert_eq!("f(z) = \\frac{-0.001 +z}{z}", result_c.to_string());
    let result_d = gl * (1.0 + al) / &result_c;
    assert_eq!("f(z) = \\frac{-0.98901*z}{-0.001 +z}", result_d.to_string());

    let result = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    assert_eq!("f(z) = \\frac{-0.98901*z}{-0.001 +z}", result.to_string());
}

#[test]
// Hd=(ad+z^-1)/(1+ad*z^-1);
fn test_hd() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let ad = -0.30;

    let lhs = ad + z.pow(-1);
    assert_eq!("f(z) = \\frac{1 -0.3*z}{z}", lhs.to_string());
    let rhs = 1.0 + ad * z.pow(-1);
    assert_eq!("f(z) = \\frac{-0.3 +z}{z}", rhs.to_string());
    let result = lhs / rhs;
    assert_eq!("f(z) = \\frac{z -0.3*z^2}{-0.3*z +z^2}", result.to_string());

    let result = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    assert_eq!("f(z) = \\frac{z -0.3*z^2}{-0.3*z +z^2}", result.to_string());
}

#[test]
// Hfd1=(C+z^-1)/(1+C*z^-1);
fn test_hfd1() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let hfd1 = (c + z.pow(-1)) / (1.0 + c * z.pow(-1));
    assert_eq!(
        "f(z) = \\frac{z -0.3242*z^2}{-0.3242*z +z^2}",
        hfd1.to_string()
    );
}

#[test]
// Hfd2=(C*(1+offtune)+z^-1)/(1+C*(1+offtune)*z^-1);
fn test_hfd2() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let offtune = 0.04;
    let hfd2 = (c * (1.0 + offtune) + z.pow(-1)) / (1.0 + c * (1.0 + offtune) * z.pow(-1));
    assert_eq!(
        "f(z) = \\frac{z -0.337168*z^2}{-0.337168*z +z^2}",
        hfd2.to_string()
    );
}

#[test]
// Hfd3=(C*(1-offtune)+z^-1)/(1+C*(1-offtune)*z^-1);
fn test_hfd3() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let offtune = 0.04;
    let hfd3 = (c * (1.0 - offtune) + z.pow(-1)) / (1.0 + c * (1.0 - offtune) * z.pow(-1));
    assert_eq!(
        "f(z) = \\frac{z -0.31123199999999995*z^2}{-0.31123199999999995*z +z^2}",
        hfd3.to_string()
    );
}

#[test]
fn test_hd_pow() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let ad = -0.30;

    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    assert_eq!("f(z) = \\frac{z -0.3*z^2}{-0.3*z +z^2}", hd.to_string());
    assert_eq!(
        "f(z) = \\frac{z -0.3*z^2}{-0.3*z +z^2}",
        hd.pow(1).to_string()
    );
    assert_eq!(
        "f(z) = \\frac{z^2 -0.6*z^3 +0.09*z^4}{0.09*z^2 -0.6*z^3 +z^4}",
        hd.pow(2).to_string()
    );
}

#[test]
// H1=Hl*Hd^ap_num*Hfd1;
fn test_h1() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd1 = (c + z.pow(-1)) / (1.0 + c * z.pow(-1));
    let h1 = &(&hl * &hd.pow(ap_num)) * &hfd1;
    assert_eq!("f(z) = \\frac{-0.98901*z^{14} +3.881073041999999*z^{15} -7.029012751199999*z^{16} +7.779303429479999*z^{17} -5.8700196244799985*z^{18} +3.189003305498999*z^{19} -1.2832784055115196*z^{20} +0.3872866466470319*z^{21} -0.08765769861913678*z^{22} +0.014695983623781895*z^{23} -0.0017738820973249195*z^{24} +0.0001459837767105828*z^{25} -0.000007341587272910878*z^{26} +0.00000017039967023752195*z^{27}}{0.00000000017229317219999994*z^{13} -0.00000017971634008799996*z^{14} +0.000007570773854279998*z^{15} -0.000149399559972*z^{16} +0.0018084529791899994*z^{17} -0.014947918951679996*z^{18} +0.08902335190319997*z^{19} -0.3928877615519999*z^{20} +1.3007627918999995*z^{21} -3.2303751479999994*z^{22} +5.943113747999998*z^{23} -7.872855119999999*z^{24} +7.1110441999999985*z^{25} -3.925199999999999*z^{26} +z^{27}}", h1.to_string());
}

#[test]
fn test_h2() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;
    let offtune = 0.04;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd2 = (c * (1.0 + offtune) + z.pow(-1)) / (1.0 + c * (1.0 + offtune) * z.pow(-1));
    let h2 = &(&hl * &hd.pow(ap_num)) * &hfd2;

    assert_eq!("f(z) = \\frac{-0.98901*z^{14} +3.893898523679999*z^{15} -7.075184485247998*z^{16} +7.855486790659199*z^{17} -5.946202985659198*z^{18} +3.240427074294959*z^{19} -1.3079618145335805*z^{20} +0.39592583980475315*z^{21} -0.08987920543112224*z^{22} +0.015112516151029173*z^{23} -0.0018294197676245565*z^{24} +0.0001509821670375501*z^{25} -0.000007614226745290914*z^{26} +0.00000017721565704702284*z^{27}}{0.00000000017918489908799998*z^{13} -0.00000018688373605151997*z^{14} +0.0000078514968628512*z^{15} -0.00015450964783488*z^{16} +0.0018650289519575995*z^{17} -0.015371326231747195*z^{18} +0.09127827956332799*z^{19} -0.4016479121740799*z^{20} +1.3257724811759997*z^{21} -3.2824473739199993*z^{22} +6.020220697919999*z^{23} -7.949931724799999*z^{24} +7.157741967999999*z^{25} -3.9381679999999992*z^{26} +z^{27}}", h2.to_string());
}

#[test]
fn test_h3() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;
    let offtune = 0.04;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd3 = (c * (1.0 - offtune) + z.pow(-1)) / (1.0 + c * (1.0 - offtune) * z.pow(-1));
    let h3 = &hl * &hd.pow(ap_num) * &hfd3;

    assert_eq!("f(z) = \\frac{-0.98901*z^{14} +3.8682475603199986*z^{15} -6.982841017151999*z^{16} +7.703120068300798*z^{17} -5.793836263300799*z^{18} +3.137579536703039*z^{19} -1.2585949964894587*z^{20} +0.3786474534893106*z^{21} -0.08543619180715128*z^{22} +0.01427945109653462*z^{23} -0.0017183444270252824*z^{24} +0.00014098538638361544*z^{25} -0.000007068947800530842*z^{26} +0.00000016358368342802103*z^{27}}{0.00000000016540144531199993*z^{13} -0.00000017254894412447994*z^{14} +0.000007290050845708798*z^{15} -0.00014428947210911997*z^{16} +0.0017518770064223993*z^{17} -0.014524511671612794*z^{18} +0.08676842424307196*z^{19} -0.38412761092991987*z^{20} +1.2757531026239997*z^{21} -3.1783029220799994*z^{22} +5.866006798079999*z^{23} -7.7957785151999985*z^{24} +7.064346431999999*z^{25} -3.912231999999999*z^{26} +z^{27}}", h3.to_string());
}

#[test]
// DW1=DL1/(1+H1*DL1*DL1*DL2*DL2)+DL2*DL2*DL1*(-1)/(1+H1*DL1*DL1*DL2*DL2);
fn test_dw1() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let m = 38;
    let i0 = 5;
    let dl1 = z.pow(-(m - i0));
    let dl2 = z.pow(-i0);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd1 = (c + z.pow(-1)) / (1.0 + c * z.pow(-1));
    let h1 = &(&hl * &hd.pow(ap_num)) * &hfd1;
    // does it work to add two transfer functions? The numerator seems to be empty which is of course incorrect.
    let lhs = &dl1 / (1.0 + &h1 * &dl1 * &dl1 * &dl2 * &dl2);
    assert_eq!("f(z) = \\frac{0.00000000017229317219999994*z^{89} -0.00000017971634008799996*z^{90} +0.000007570773854279998*z^{91} -0.000149399559972*z^{92} +0.0018084529791899994*z^{93} -0.014947918951679996*z^{94} +0.08902335190319997*z^{95} -0.3928877615519999*z^{96} +1.3007627918999995*z^{97} -3.2303751479999994*z^{98} +5.943113747999998*z^{99} -7.872855119999999*z^{100} +7.1110441999999985*z^{101} -3.925199999999999*z^{102} +z^{103}}{-0.98901*z^{47} +3.881073041999999*z^{48} -7.029012751199999*z^{49} +7.779303429479999*z^{50} -5.8700196244799985*z^{51} +3.189003305498999*z^{52} -1.2832784055115196*z^{53} +0.3872866466470319*z^{54} -0.08765769861913678*z^{55} +0.014695983623781895*z^{56} -0.0017738820973249195*z^{57} +0.0001459837767105828*z^{58} -0.000007341587272910878*z^{59} +0.00000017039967023752195*z^{60} +0.00000000017229317219999994*z^{122} -0.00000017971634008799996*z^{123} +0.000007570773854279998*z^{124} -0.000149399559972*z^{125} +0.0018084529791899994*z^{126} -0.014947918951679996*z^{127} +0.08902335190319997*z^{128} -0.3928877615519999*z^{129} +1.3007627918999995*z^{130} -3.2303751479999994*z^{131} +5.943113747999998*z^{132} -7.872855119999999*z^{133} +7.1110441999999985*z^{134} -3.925199999999999*z^{135} +z^{136}}", lhs.to_string());
    let rhs = -1.0 * &dl2 * &dl2 * &dl1 / (1.0 + &h1 * &dl1 * &dl1 * &dl2 * &dl2);
    assert_eq!("f(z) = \\frac{-0.00000000017229317219999994*z^{89} +0.00000017971634008799996*z^{90} -0.000007570773854279998*z^{91} +0.000149399559972*z^{92} -0.0018084529791899994*z^{93} +0.014947918951679996*z^{94} -0.08902335190319997*z^{95} +0.3928877615519999*z^{96} -1.3007627918999995*z^{97} +3.2303751479999994*z^{98} -5.943113747999998*z^{99} +7.872855119999999*z^{100} -7.1110441999999985*z^{101} +3.925199999999999*z^{102} -1*z^{103}}{-0.98901*z^{57} +3.881073041999999*z^{58} -7.029012751199999*z^{59} +7.779303429479999*z^{60} -5.8700196244799985*z^{61} +3.189003305498999*z^{62} -1.2832784055115196*z^{63} +0.3872866466470319*z^{64} -0.08765769861913678*z^{65} +0.014695983623781895*z^{66} -0.0017738820973249195*z^{67} +0.0001459837767105828*z^{68} -0.000007341587272910878*z^{69} +0.00000017039967023752195*z^{70} +0.00000000017229317219999994*z^{132} -0.00000017971634008799996*z^{133} +0.000007570773854279998*z^{134} -0.000149399559972*z^{135} +0.0018084529791899994*z^{136} -0.014947918951679996*z^{137} +0.08902335190319997*z^{138} -0.3928877615519999*z^{139} +1.3007627918999995*z^{140} -3.2303751479999994*z^{141} +5.943113747999998*z^{142} -7.872855119999999*z^{143} +7.1110441999999985*z^{144} -3.925199999999999*z^{145} +z^{146}}", rhs.to_string());

    let dw1 = &dl1 / (1.0 + &h1 * &dl1 * &dl1 * &dl2 * &dl2)
        + -1.0 * &dl2 * &dl2 * &dl1 / (1.0 + &h1 * &dl1 * &dl1 * &dl2 * &dl2);
    assert_eq!("f(z) = \\frac{0.00000000017039967023752194*z^{136} -0.00000017840993989637893*z^{137} +0.00000818627434324824*z^{138} -0.00017840495388777515*z^{139} +0.0024230228309059603*z^{140} -0.02291246167462185*z^{141} +0.15997782803127486*z^{142} -0.854115025875457*z^{143} +3.5644260567505865*z^{144} -11.791087892471774*z^{145} +31.187209252626637*z^{146} -66.28741794404536*z^{147} +113.50091728550886*z^{148} -156.7025512157194*z^{149} +174.4668229004296*z^{150} -156.61884883854717*z^{151} +113.25059330057418*z^{152} -65.35107973470403*z^{153} +27.568369089178344*z^{154} +0.027568369089179257*z^{155} -27.633692600543956*z^{156} +65.43669663540406*z^{157} -113.34177545277731*z^{158} +156.67997388599485*z^{159} -174.4668454777593*z^{160} +156.64158528752714*z^{161} -113.4105631181654*z^{162} +66.20519459017981*z^{163} -31.13279514592893*z^{164} +11.763519523382595*z^{165} -3.5535166522530792*z^{166} +0.8507214870512352*z^{167} -0.15915001900589826*z^{168} +0.02275573467844686*z^{169} -0.0024004455011814013*z^{170} +0.000176012694660937*z^{171} -0.000008010440058527198*z^{172} +0.00000017039967023752195*z^{173} -0.00000000000000000002968493718673883*z^{211} +0.00000000000000006192779665987105*z^{212} -0.0000000000000349067481813511*z^{213} +0.0000000000027726645856759644*z^{214} -0.00000000011163886921161899*z^{215} +0.0000000029173085149843884*z^{216} -0.00000005510645238617458*z^{217} +0.0000007988320723229586*z^{218} -0.000009226543461954012*z^{219} +0.00008708289491023193*z^{220} -0.0006836826024924769*z^{221} +0.004522184302920797*z^{222} -0.02543365611352998*z^{223} +0.12242128926868151*z^{224} -0.5064892615016863*z^{225} +1.8055995161106613*z^{226} -5.550758887099542*z^{227} +14.702678514938853*z^{228} -33.46983571269632*z^{229} +65.19477007164345*z^{230} -107.94640458689598*z^{231} +150.51398947972024*z^{232} -174.4411658253671*z^{233} +164.9625906510603*z^{234} -123.75174968278827*z^{235} +69.764652108652*z^{236} -24.078524497793993*z^{237} -6.852279313770928*z^{238} +32.469844939239785*z^{239} -65.19485715453835*z^{240} +107.94708826949848*z^{241} -150.51851166402315*z^{242} +174.46659948148067*z^{243} -165.08501194033175*z^{244} +124.2582389444016*z^{245} -71.57025162767997*z^{246} +29.629283439999988*z^{247} -7.850399999999998*z^{248} +z^{249}}{0.9781407800999999*z^{104} -7.676840098536837*z^{105} +28.966255759467746*z^{106} -69.94784157069314*z^{107} +121.40212612553202*z^{108} -161.23350816204126*z^{109} +170.33030729975954*z^{110} -146.8874725704309*z^{111} +105.29350385400267*z^{112} -63.55901454046764*z^{113} +32.61099691610925*z^{114} -14.316004660685266*z^{115} +5.400759061558137*z^{116} -1.7553146879624266*z^{117} +0.49190177133174445*z^{118} -0.1187596965314765*z^{119} +0.02463968493688321*z^{120} -0.004373934752244685*z^{121} +0.0006599653249533633*z^{122} -0.00008385502617620159*z^{123} +0.000008856488401824894*z^{124} -0.0000007635733945610522*z^{125} +0.00000005236586504803239*z^{126} -0.0000000027480431231485764*z^{127} +0.00000000010365007850878966*z^{128} -0.0000000000025020081006480034*z^{129} +0.00000000000002903604761705622*z^{130} -0.0000000003407993404750439*z^{179} +0.00000035681987979275785*z^{180} -0.000016372548686496478*z^{181} +0.0003568099077755503*z^{182} -0.00484604566181192*z^{183} +0.0458249233492437*z^{184} -0.3199556560625498*z^{185} +1.708230051750914*z^{186} -7.128852113501173*z^{187} +23.582175784943548*z^{188} -62.37441850559408*z^{189} +132.57483624491056*z^{190} -227.00185094356638*z^{191} +313.4054592413465*z^{192} -348.938491846521*z^{193} +313.2835226004437*z^{194} -226.8211422572109*z^{195} +132.41038952115895*z^{196} -62.26559029185787*z^{197} +23.527039046765186*z^{198} -7.107033304506159*z^{199} +1.7014429741024706*z^{200} -0.3183000380117965*z^{201} +0.045511469356893715*z^{202} -0.0048008910023628025*z^{203} +0.000352025389321874*z^{204} -0.000016020880117054396*z^{205} +0.0000003407993404750439*z^{206} +0.00000000000000000002968493718673883*z^{254} -0.00000000000000006192779665987105*z^{255} +0.0000000000000349067481813511*z^{256} -0.0000000000027726645856759644*z^{257} +0.00000000011163886921161899*z^{258} -0.0000000029173085149843884*z^{259} +0.00000005510645238617458*z^{260} -0.0000007988320723229586*z^{261} +0.000009226543461954012*z^{262} -0.00008708289491023193*z^{263} +0.0006836826024924769*z^{264} -0.004522184302920859*z^{265} +0.025433656113564886*z^{266} -0.12242128927145418*z^{267} +0.5064892616133252*z^{268} -1.80559951902797*z^{269} +5.550758942205995*z^{270} -14.702679313770926*z^{271} +33.469844939239785*z^{272} -65.19485715453835*z^{273} +107.94708826949848*z^{274} -150.51851166402315*z^{275} +174.46659948148067*z^{276} -165.08501194033175*z^{277} +124.2582389444016*z^{278} -71.57025162767997*z^{279} +29.629283439999988*z^{280} -7.850399999999998*z^{281} +z^{282}}", dw1.to_string());
}

#[test]
fn test_dw2() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let m = 38;
    let i0 = 5;
    let dl1 = z.pow(-(m - i0));
    let dl2 = z.pow(-i0);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;
    let offtune = 0.04;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd2 = (c * (1.0 + offtune) + z.pow(-1)) / (1.0 + c * (1.0 + offtune) * z.pow(-1));
    let h2 = &(&hl * &hd.pow(ap_num)) * &hfd2;

    let dw2 = &dl1 / (1.0 + &h2 * &dl1 * &dl1 * &dl2 * &dl2)
        + -1.0 * &dl2 * &dl2 * &dl1 / (1.0 + &h2 * &dl1 * &dl1 * &dl2 * &dl2);
    assert_eq!("f(z) = \\frac{0.00000000017721565704702284*z^{136} -0.00000018552761160633828*z^{137} +0.000008494182982457298*z^{138} -0.00018470816334257385*z^{139} +0.0025031970903538828*z^{140} -0.02362060226144883*z^{141} +0.16458598060632895*z^{142} -0.8770122712638345*z^{143} +3.653339232871514*z^{144} -12.065214914970062*z^{145} +31.865870323681143*z^{146} -67.6481173744261*z^{147} +115.72515880366977*z^{148} -159.68227848569492*z^{149} +177.74976988605843*z^{150} -159.59681548581153*z^{151} +115.46860899871832*z^{152} -66.68733796403441*z^{153} +28.15703195566652*z^{154} +0.028157031955666767*z^{155} -28.223691136598596*z^{156} +66.77458288189654*z^{157} -115.56143123132222*z^{158} +159.65900382446625*z^{159} -177.74979316071966*z^{160} +159.62025385133788*z^{161} -115.63318666719289*z^{162} +67.5643500580826*z^{163} -31.81037118853803*z^{164} +12.037057883014395*z^{165} -3.642179187259763*z^{166} +0.8735346780571811*z^{167} -0.1637360665305332*z^{168} +0.023459369392008655*z^{169} -0.002479922429125217*z^{170} +0.0001822367350964311*z^{171} -0.000008312131774972474*z^{172} +0.00000017721565704702284*z^{173} -0.00000000000000000003210722806117674*z^{211} +0.00000000000000006697348677116006*z^{212} -0.00000000000003773927014669367*z^{213} +0.0000000000029900057259636723*z^{214} -0.00000000012006505352324172*z^{215} +0.0000000031288598063631504*z^{216} -0.00000005893778233203841*z^{217} +0.0000008519665628020224*z^{218} -0.00000981230969018581*z^{219} +0.00009234646816868161*z^{220} -0.0007229155196671894*z^{221} +0.004767792936033135*z^{222} -0.026736503673274285*z^{223} +0.12831282105993363*z^{224} -0.5292869708226569*z^{225} +1.8812251466444538*z^{226} -5.765813110834926*z^{227} +15.225932863518*z^{228} -34.55497630531172*z^{229} +67.10108959654244*z^{230} -110.75794448814486*z^{231} +153.9512672382087*z^{232} -177.86225399922017*z^{233} +167.66098283642063*z^{234} -125.36075794695009*z^{235} +70.39541904109592*z^{236} -24.058837962451282*z^{237} -7.349597715484565*z^{238} +33.55498611762141*z^{239} -67.1011819430106*z^{240} +110.75866740366453*z^{241} -153.95603503114472*z^{242} +177.88899050289348*z^{243} -167.78929565748356*z^{244} +125.89004491789281*z^{245} -72.27664419086923*z^{246} +29.82465113222399*z^{247} -7.8763359999999984*z^{248} +z^{249}}{0.9781407800999999*z^{104} -7.702209157809511*z^{105} +29.15730212822752*z^{106} -70.63841082540134*z^{107} +122.99688076385877*z^{108} -163.87548814690194*z^{109} +173.67260196852715*z^{110} -150.24316712704157*z^{111} +108.03690933020081*z^{112} -65.4181783895409*z^{113} +33.66869668374647*z^{114} -14.825703870669072*z^{115} +5.6100919153543085*z^{116} -1.8288680260084287*z^{117} +0.5140538245107478*z^{118} -0.1244780663742723*z^{119} +0.025902594373586885*z^{120} -0.004611643034993238*z^{121} +0.0006978639616893015*z^{122} -0.00008892750684758046*z^{123} +0.00000941926737728429*z^{124} -0.0000008144157760968695*z^{125} +0.000000056011197568053015*z^{126} -0.000000002947628560907384*z^{127} +0.00000000011148925679658905*z^{128} -0.0000000000026987203911434873*z^{129} +0.000000000000031405389102608014*z^{130} -0.0000000003544313140940457*z^{179} +0.00000037105522321267655*z^{180} -0.000016988365964914596*z^{181} +0.0003694163266851477*z^{182} -0.0050063941807077655*z^{183} +0.04724120452289766*z^{184} -0.32917196121265785*z^{185} +1.754024542527669*z^{186} -7.306678465743027*z^{187} +24.130429829940123*z^{188} -63.73174064771671*z^{189} +135.2962351199075*z^{190} -231.45033459570556*z^{191} +319.36492638771654*z^{192} -355.5045461662976*z^{193} +319.24087217614596*z^{194} -231.26638995864928*z^{195} +135.12870047059653*z^{196} -63.62074237707607*z^{197} +24.074115766028793*z^{198} -7.284358374519527*z^{199} +1.7470693561143622*z^{200} -0.3274721330610664*z^{201} +0.046918738784017304*z^{202} -0.004959844858250434*z^{203} +0.0003644734701928622*z^{204} -0.000016624263549944948*z^{205} +0.0000003544313140940457*z^{206} +0.00000000000000000003210722806117674*z^{254} -0.00000000000000006697348677116006*z^{255} +0.00000000000003773927014669367*z^{256} -0.0000000000029900057259636723*z^{257} +0.00000000012006505352324172*z^{258} -0.0000000031288598063631504*z^{259} +0.00000005893778233203841*z^{260} -0.0000008519665628020224*z^{261} +0.00000981230969018581*z^{262} -0.00009234646816868161*z^{263} +0.0007229155196671894*z^{264} -0.004767792936033202*z^{265} +0.026736503673312026*z^{266} -0.12831282106292363*z^{267} +0.5292869709427219*z^{268} -1.8812251497733137*z^{269} +5.765813169772708*z^{270} -15.225933715484564*z^{271} +34.55498611762141*z^{272} -67.1011819430106*z^{273} +110.75866740366453*z^{274} -153.95603503114472*z^{275} +177.88899050289348*z^{276} -167.78929565748356*z^{277} +125.89004491789281*z^{278} -72.27664419086923*z^{279} +29.82465113222399*z^{280} -7.8763359999999984*z^{281} +z^{282}}", dw2.to_string());
}

#[test]
fn test_dw3() {
    let fs = 44100.0;
    let z = TransferFunction::new(1.0 / fs);
    let m = 38;
    let i0 = 5;
    let dl1 = z.pow(-(m - i0));
    let dl2 = z.pow(-i0);
    let c = -0.3242;
    let ad = -0.30;
    let gl = -0.99;
    let al = -0.001;
    let ap_num = 12;
    let offtune = 0.04;

    let hl = gl * (1.0 + al) / &(1.0 + al * z.pow(-1));
    let hd = (ad + z.pow(-1)) / (1.0 + ad * z.pow(-1));
    let hfd3 = (c * (1.0 - offtune) + z.pow(-1)) / (1.0 + c * (1.0 - offtune) * z.pow(-1));
    let h3 = &hl * &hd.pow(ap_num) * &hfd3;

    let dw3 = &dl1 / (1.0 + &h3 * &dl1 * &dl1 * &dl2 * &dl2)
        + -1.0 * &dl2 * &dl2 * &dl1 / (1.0 + &h3 * &dl1 * &dl1 * &dl2 * &dl2);
    assert_eq!("f(z) = \\frac{0.00000000016358368342802105*z^{136} -0.00000017129244496585342*z^{137} +0.00000787855019105639*z^{138} -0.0001721096081608539*z^{139} +0.002343006666193461*z^{140} -0.022206288064861055*z^{141} +0.15538658280005696*z^{142} -0.8313241485790215*z^{143} +3.476019487789985*z^{144} -11.518825500253005*z^{145} +30.513918126068624*z^{146} -64.93890412747221*z^{147} +111.29853774824514*z^{148} -153.75386744536928*z^{149} +171.21876496311742*z^{150} -153.6719107045696*z^{151} +111.0544038313014*z^{152} -64.02688427789778*z^{153} +26.984559255515997*z^{154} +0.026984559255517127*z^{155} -27.048559155234642*z^{156} +64.11089012257384*z^{157} -111.1439648518834*z^{158} +153.73198550468084*z^{159} -171.2187868450581*z^{160} +153.6939471962725*z^{161} -111.20978270517634*z^{162} +64.85820826289311*z^{163} -30.46057874330598*z^{164} +11.491840940997488*z^{165} -3.465358970997567*z^{166} +0.8280141761908242*z^{167} -0.154580774911931*z^{168} +0.02205405029661532*z^{169} -0.0023211247255050067*z^{170} +0.00016979636198553998*z^{171} -0.000007708925121515816*z^{172} +0.00000016358368342802103*z^{173} -0.000000000000000000027357638111298506*z^{211} +0.000000000000000057079689490497*z^{212} -0.000000000000032184708011029304*z^{213} +0.0000000000025635125265419585*z^{214} -0.00000000010351835943217632*z^{215} +0.0000000027131289821860834*z^{216} -0.00000005140307821729878*z^{217} +0.0000007473943446009212*z^{218} -0.000008658617388343188*z^{219} +0.00008197178703684652*z^{220} -0.0006455271704239605*z^{221} +0.0042829490282050055*z^{222} -0.024162627355899507*z^{223} +0.11666457676761315*z^{224} -0.48417788174093224*z^{225} +1.73146891895177*z^{226} -5.3396171290368235*z^{227} +14.188112511485896*z^{228} -32.40097579310665*z^{229} +63.313974849623186*z^{230} -105.16793476633048*z^{231} +147.1115018450018*z^{232} -171.04903141906408*z^{233} +162.2824605597528*z^{234} -122.15061456978248*z^{235} +69.13481244944752*z^{236} -24.09463490538409*z^{237} -6.363649258880241*z^{238} +31.400984451724042*z^{239} -63.314056821410226*z^{240} +105.1685802935009*z^{241} -147.11578479403002*z^{242} +171.07319404642*z^{243} -162.39912513652297*z^{244} +122.63479245162692*z^{245} -70.86628137111242*z^{246} +29.434252085823992*z^{247} -7.824463999999998*z^{248} +z^{249}}{0.9781407800999999*z^{104} -7.651471039264163*z^{105} +28.775538376668617*z^{106} -69.25964101490162*z^{107} +119.81554349846778*z^{108} -158.60950660195806*z^{109} +167.01632865001648*z^{110} -143.5657572366496*z^{111} +102.58237863949249*z^{112} -61.72475260755369*z^{113} +31.56917212002358*z^{114} -13.814772102195613*z^{115} +5.195236200934337*z^{116} -1.6832160745822393*z^{117} +0.47022250366913115*z^{118} -0.11317225190860407*z^{119} +0.02340763644487575*z^{120} -0.004142398658435377*z^{121} +0.0006231082451009228*z^{122} -0.00007892958882955184*z^{123} +0.000008310864480917227*z^{124} -0.0000007143562287196091*z^{125} +0.000000048842423705089794*z^{126} -0.0000000025554228955085147*z^{127} +0.00000000009609584063493899*z^{128} -0.0000000000023127290383424857*z^{129} +0.000000000000026759621483879002*z^{130} -0.0000000003271673668560421*z^{179} +0.00000034258488993170685*z^{180} -0.00001575710038211278*z^{181} +0.0003442192163217079*z^{182} -0.004686013332386923*z^{183} +0.04441257612972211*z^{184} -0.310773165600114*z^{185} +1.662648297158043*z^{186} -6.952038975579969*z^{187} +23.037651000506013*z^{188} -61.02783625246442*z^{189} +129.87780859752934*z^{190} -222.59709125359063*z^{191} +307.50807910995485*z^{192} -342.4422159395673*z^{193} +307.38823398526904*z^{194} -222.41958082820287*z^{195} +129.7164168529536*z^{196} -60.92115748661197*z^{197} +22.98368188199498*z^{198} -6.930717941995132*z^{199} +1.6560283523816484*z^{200} -0.309161549823862*z^{201} +0.044108100593230636*z^{202} -0.004642249451010013*z^{203} +0.0003395927239710799*z^{204} -0.000015417850243031632*z^{205} +0.00000032716736685604205*z^{206} +0.000000000000000000027357638111298506*z^{254} -0.000000000000000057079689490497*z^{255} +0.000000000000032184708011029304*z^{256} -0.0000000000025635125265419585*z^{257} +0.00000000010351835943217632*z^{258} -0.0000000027131289821860834*z^{259} +0.00000005140307821729878*z^{260} -0.0000007473943446009212*z^{261} +0.000008658617388343188*z^{262} -0.00008197178703684652*z^{263} +0.0006455271704239605*z^{264} -0.004282949028205063*z^{265} +0.024162627355931693*z^{266} -0.11666457677017666*z^{267} +0.4841778818444506*z^{268} -1.731468921664899*z^{269} +5.339617180439902*z^{270} -14.18811325888024*z^{271} +32.40098445172404*z^{272} -63.314056821410226*z^{273} +105.1685802935009*z^{274} -147.11578479403002*z^{275} +171.07319404642*z^{276} -162.39912513652297*z^{277} +122.63479245162692*z^{278} -70.86628137111242*z^{279} +29.434252085823992*z^{280} -7.824463999999998*z^{281} +z^{282}}", dw3.to_string());
}
